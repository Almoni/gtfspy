from gtfspy.routing.models import Connection


class Journey:
    """
    A class for handling journeys generated by routing algorithms
    Current assumptions:
    - legs are added in order of travel
    - walking trips do not have a trip_id
    """

    def __init__(self):
        self.legs = []

    def add_leg(self, leg):
        """
        Parameters
        ----------
        leg: namedtuple
            contains:
            departure_time: int
                departure time in unixtime seconds
            departure_stop: int
                index of departure stop
            arrival_time: int
                arrival time in unixtime seconds
            arrival_stop: int
                index of arrival stop
            trip_id: string
                index for pulic transport trip (empty index implies walking leg)
        """
        assert (isinstance(leg, Connection))
        self.legs.append(leg)

    def get_journey(self):
        return self.legs

    def get_travel_time(self):
        travel_time = self.legs[-1].arrival_time - self.legs[0].departure_time
        return travel_time

    def get_boardings(self):
        boardings = 0
        for leg in self.legs:
            if leg.trip_id is not None:
                boardings += 1
        return boardings

    def get_transfers(self):
        boardings = self.get_boardings()
        if boardings > 1:
            transfers = boardings - 1
        else:
            transfers = 0
        return transfers

    def get_all_stops(self):
        all_stops = []
        for leg in self.legs:
            all_stops.append(leg.departure_stop)
        all_stops.append(leg.arrival_stop)
        return all_stops

    def get_transfer_stop_pairs(self):
        transfer_stop_pairs = []
        previous_arrival_stop = None
        for leg in self.legs:
            if leg.trip_id is not None:
                if previous_arrival_stop:
                    transfer_stop_pair = (previous_arrival_stop, leg.departure_stop)
                    transfer_stop_pairs.append(transfer_stop_pair)
                previous_arrival_stop = leg.arrival_stop
        return transfer_stop_pairs

    def get_transfer_trip_pairs(self):
        pass

    def get_waiting_times(self):
        waiting_times = []
        previous_arrival = None
        for leg in self.legs:
            current_departure = leg.departure_time
            if previous_arrival:
                waiting_times.append(current_departure-previous_arrival)
            previous_arrival = leg.arrival_time
        return waiting_times

    def get_total_waiting_time(self):
        waiting_times = self.get_waiting_times()
        waiting_total = sum(waiting_times)
        return waiting_total

    def get_invehicle_times(self):
        invehicle_times = []
        for leg in self.legs:
            if leg.trip_id is not None:
                invehicle_times.append(leg)
        return invehicle_times

    def get_total_invehicle_time(self):
        return sum(self.get_invehicle_times())

    def get_walking_times(self):
        walking_times = []
        for leg in self.legs:
            if leg.trip_id is None:
                walking_times.append(leg)
        return walking_times

    def get_total_walking_time(self):
        return sum(self.get_walking_times())

