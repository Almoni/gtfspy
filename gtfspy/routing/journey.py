
class Journey:
    """
    A class for handling journeys generated by routing algorithms
    """

    def __init__(self):
        self.legs = []

    def add_leg(self, departure_stop, arrival_stop, departure_time, arrival_time, trip_id=None):
        """
        Parameters
        ----------
        departure_time: int
            departure time in unixtime seconds
        departure_stop: int
            index of departure stop
        arrival_time: int
            arrival time in unixtime seconds
        arrival_stop: int
            index of arrival stop
        trip_id: int
            index for pulic transport trip (empty index implies walking leg)
        """
        leg_data = {"departure_time": departure_time,
                    "departure_stop": departure_stop,
                    "arrival_time": arrival_time,
                    "arrival_stop": arrival_stop,
                    "trip_id": trip_id}
        self.legs.append(leg_data)

    def get_journey(self):
        return self.legs

    def get_travel_time(self):
        travel_time = self.legs[-1]["arrival_time"] - self.legs[0]["departure_time"]
        return travel_time

    def get_boardings(self):
        boardings = 0
        for leg in self.legs:
            if leg["trip_id"] is not None:
                boardings += 1
        return boardings

    def get_transfers(self):
        boardings = self.get_boardings()
        if boardings > 1:
            transfers = boardings - 1
        else:
            transfers = 0
        return transfers

    def get_waiting_times(self):
        waiting_times = []
        previous_arrival = None
        for leg in self.legs:
            current_departure = leg["departure_time"]
            if previous_arrival:
                waiting_times.append(current_departure-previous_arrival)
            previous_arrival = leg["arrival_time"]
        return waiting_times

    def get_waiting_total(self):
        waiting_times = self.get_waiting_times()
        waiting_total = sum(waiting_times)
        return waiting_total

    def get_transfer_locations(self):
        pass

    def get_walking_distance(self):
        pass
